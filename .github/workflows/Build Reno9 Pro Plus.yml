name: Build Reno9 Pro Plus
on:
  workflow_dispatch:
  inputs:
    SUKISU_META:
      type: string
      description: "分支/自定义版本标识"
      required: false
      default: "sufus-main/TNTyep520"
    KERNEL_SUFFIX:
      type: string
      description: "自定义内核后缀（留空保持默认）"
      required: false
      default: ""
    LZ4:
      type: boolean
      description: "是否启用 lz4 1.10.0 + zstd 1.5.7 补丁"
      required: true
      default: true
    VFS:
      type: boolean
      description: "是否启用手动钩子（VFS）"
      required: true
      default: true
    SSG:
      type: boolean
      description: "是否启用三星 SSG IO 调度器"
      required: true
      default: true
    KPM:
      type: boolean
      description: "是否启用内核模块（KPM）"
      required: true
      default: true
    ZRAM:
      type: boolean
      description: "是否启用 ZRAM 算法"
      required: true
      default: false

jobs:
 build:
  runs-on: ubuntu-latest
  env:
   CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
   CCACHE_NOHASHDIR: "true"
   CCACHE_HARDLINK: "true"
   CCACHE_MAXSIZE: 8G
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check Disk Space
      run: df -h

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
       root-reserve-mb: 8192
       temp-reserve-mb: 2048
       swap-size-mb: 8192
       remove-dotnet: 'true'
       remove-android: 'true'
       remove-haskell: 'true'
       remove-codeql: 'true'

    - name: Create and Enable 4G Swap
      run: |
       sudo swapoff -a
       sudo fallocate -l 4G /swapfile
       sudo chmod 600 /swapfile
       sudo mkswap /swapfile
       sudo swapon /swapfile

    - name: Set Cache Environment
      run: |
       echo "CCACHE_DIR=$HOME/.ccache_reno9_pro_plus" >> $GITHUB_ENV
       mkdir -p "$HOME/.ccache_reno9_pro_plus"
       echo "set: $HOME/.ccache_reno9_pro_plus"

    - name: Configure APTC
      run: |
       APT_CACHE_DIR="$HOME/apt-cache"
       mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
       echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
       echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
       echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
       echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
       echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
       sudo chown -R $USER:$USER "$APT_CACHE_DIR"

    - name: Set APT Cache
      uses: actions/cache@v3
      with:
      path: ${{ env.HOME }}/apt-cache
      key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build Reno9 Pro Plus.yml') }}
      restore-keys: |
       ${{ runner.os }}-apt-

    - name: Install and Config Dependencies
      run: |
       sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
       APT_CACHE_DIR="$HOME/apt-cache"
       mkdir -p "$APT_CACHE_DIR/lists/partial"
       sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
       sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
       python3 git curl ccache libelf-dev \
       build-essential flex bison libssl-dev \
       libncurses-dev liblz4-tool zlib1g-dev \
       libxml2-utils rsync unzip
       sudo apt update && sudo apt upgrade -y
       sudo rm -rf ./llvm.sh
       sudo wget https://apt.llvm.org/llvm.sh
       sudo chmod +x llvm.sh
       sudo sudo ./llvm.sh 20 all

    - name: Restore Ccache
      uses: actions/cache@v3
      with:
      path: ${{ env.CCACHE_DIR }}
      key: ccache-${{ runner.os }}-${{ github.ref_name }}-reno9_pro_plus-${{ env.BUILD_METHOD }}

    - name: Initialize Ccache
      run: |
       INIT_FLAG="${{ env.CCACHE_DIR }}/.ccache_initialized"
       if command -v ccache >/dev/null 2>&1; then
       if [ ! -f "$INIT_FLAG" ]; then
        echo "初始化 Ccache (${{ env.CCACHE_DIR }})..."
        mkdir -p "${{ env.CCACHE_DIR }}"
        ccache -M ${{ env.CCACHE_MAXSIZE }}
        touch "$INIT_FLAG"
        echo "Ccache 初始化完成"
       else
        echo "Ccache 已初始化，跳过"
        fi
       else
        echo "未安装 Ccache，跳过"
        fi
       ccache -s

    # 拉取内核源码 && 去除 ABI 保护 && -dirty 后缀
    - name: Pull Kernel Open Source
      run: |
       cd $HOME
       rm -rf kernel_workspace && mkdir kernel_workspace && cd kernel_workspace
       git clone --depth=1 https://github.com/oppo-source/android_kernel_oppo_sm8475 -b oppo/sm8475_v_15.0.0_reno9_pro_plus msm-kernel
       git clone --depth=1 https://github.com/oppo-source/android_kernel_common_oppo_sm8475 -b oppo/sm8475_v_15.0.0_reno9_pro_plus common
       rm common/android/abi_gki_protected_exports_* || true
       rm msm-kernel/android/abi_gki_protected_exports_* || true
       sed -i 's/ -dirty//g' common/scripts/setlocalversion
       sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
       sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
       sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' msm-kernel/scripts/setlocalversion
       git add -A
       git commit -m "Force remove -dirty suffix from kernel version"

    # 添加 SukiSU Ultra
    - name: Add SukiSU Ultra
      run: |
       BRANCH_NAME="${META%%/*}"
       CUSTOM_TAG="${META#*/}"
       echo "分支名: $BRANCH_NAME"
       echo "自定义版本标识: $CUSTOM_TAG"

       cd $HOME && cd kernel_workspace
       curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
       cd ./KernelSU
       export KSU_VERSION=$KSU_VERSION
       sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
       KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/sufus-main/kernel/Makefile" | \
       grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')

       if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
        KSU_API_VERSION="3.1.7"
       fi

        echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV

        VERSION_DEFINITIONS=$(cat << 'EOF'
        define get_ksu_version_full
        v$1-CUSTOM_TAG@BRANCH_NAME
        endef

        KSU_VERSION_API := KSU_API_VERSION
        KSU_VERSION_FULL := vKSU_API_VERSION-CUSTOM_TAG@BRANCH_NAME
        EOF
       )
       VERSION_DEFINITIONS=$(echo "$VERSION_DEFINITIONS" | sed \
            -e "s/CUSTOM_TAG/$CUSTOM_TAG/g" \
            -e "s/BRANCH_NAME/$BRANCH_NAME/g" \
            -e "s/KSU_API_VERSION/$KSU_API_VERSION/g")

       sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
       sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
       sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile

       awk -v def="$VERSION_DEFINITIONS" '
       /REPO_OWNER :=/ {print; print def; inserted=1; next}
       1
       END {if (!inserted) print def}
       ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

       KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
       echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV


    # 应用 SukiSU Ultra && Sufus,Lz4k 补丁
    - name: Patch SukiSU Ultra && Sufus,Lz4k
      run: |
       cd $HOME && cd kernel_workspace
       git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-android12-5.10
       git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
       cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android12-5.10.patch ./common/
       cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
       cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
       cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
       cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
       cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
       cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib
       cd ./common
       patch -p1 < 50_add_susfs_in_gki-android12-5.10.patch || true
       patch -p1 < syscall_hooks.patch || true

    # 应用 Hide Stuff 补丁
    - name: Apply Hide Stuff Patches
      run: |
       cd kernel_workspace/common
       cp ../../SukiSU_patch/69_hide_stuff.patch ./
       patch -p1 -F 3 < 69_hide_stuff.patch

    # Convert OGKI to GKI,Fuck You dtbo
    - name: Apply Convert OGKI to GKI
      run: |
       cd kernel_workspace/common
       sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
           wget https://raw.githubusercontent.com/TNTyep520/Actions_SukiSU_oppo_kernel_sm8475/SukiSU-Ultra/Patches/hmbird_patch.patch
           patch -p1 -F 3 < hmbird_patch.patch
        
    - name: Apply VFS
      if: ${{ github.event.inputs.VFS == 'true' }}
      run: |
       cd kernel_workspace/common
       cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
       patch -p1 -F 3 < syscall_hooks.patch
        
    - name: Apply ZRAM
      if: ${{ github.event.inputs.ZRAM == 'true' }}
      run: |
       cd kernel_workspace/common
       cp ../../SukiSU_patch/other/zram/zram_patch/5.10/lz4kd.patch
       patch -p1 -F 3 < lz4kd.patch || true
       cp ../../SukiSU_patch/other/zram/zram_patch/5.10/lz4k_oplus.patch
       patch -p1 -F 3 < lz4k_oplus.patch || true

    - name: Apply lz4 && zstd
      if: ${{ github.event.inputs.LZ4 == 'true' }}
      run: |
       cd kernel_workspace
       wget https://raw.githubusercontent.com/TNTyep520/Actions_SukiSU_oppo_kernel_sm8475/SukiSU-Ultra/Patches/zram_patch/lz4/001-lz4.patch
       wget https://raw.githubusercontent.com/TNTyep520/Actions_SukiSU_oppo_kernel_sm8475/SukiSU-Ultra/Patches/zram_patch/lz4/lz4armv8.S
       wget https://raw.githubusercontent.com/TNTyep520/Actions_SukiSU_oppo_kernel_sm8475/SukiSU-Ultra/Patches/zram_patch/zstd/002-zstd.patch
       cp 001-lz4.patch ./common/
       cp lz4armv8.S ./common/lib
       cp 002-zstd.patch ./common/
       cd ./common
       git apply -p1 < 001-lz4.patch || true
       patch -p1 < 002-zstd.patch || true

    - name: Custom Kernel Suffix if set
      if [ "${{ github.event.inputs.KERNEL_SUFFIX }}" = "true" ]; then
       echo "当前内核版本后缀：${{ github.event.inputs.KERNEL_SUFFIX }}"
       for f in ./common/scripts/setlocalversion; do
       sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.KERNEL_SUFFIX }}\"|" "$f"
       done
      else
      RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
      RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
      RANDOM_SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}"

      for path in \
        ./common/scripts/setlocalversion \
        ./msm-kernel/scripts/setlocalversion \

        [ -f "$path" ] || continue

          echo "Modifying: $path"

       if grep -q 'KERNELVERSION.*scm_version' "$path"; then
        echo "Detected NEW setlocalversion format"
        sed -i "s|echo \"\${KERNELVERSION}.*scm_version}\"|echo \"\${KERNELVERSION}-android12-${RANDOM_SUFFIX}\"|" "$path"

        elif grep -q 'echo "\$res"' "$path"; then
        echo "Detected OLD setlocalversion format"
        echo "FAST_BUILD enabled: using static res with random suffix"
        sed -i "s/^res=.*/res=\"-android12-${RANDOM_SUFFIX}\"/" "$path"
        fi
       done

    - name: Configuration Settings
      run: |
       cd kernel_workspace
       CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
       KERNEL_VERSION="5.10"

       # SukiSU Ultra 配置
       echo "CONFIG_KSU=y" >> "$CONFIG_FILE"

       # KPM 配置
       if [ "${{ github.event.inputs.KPM }}" = "true" ]; then
        echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
       fi

       # VFS 配置
       if [ "${{ github.event.inputs.VFS }}" = "true" ]; then
        echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_MANUAL_HOOK=n" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_KPROBES_HOCK=y"
       else
        echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
        echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
       fi

       # SUSFS 配置
       echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
       echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"

       # lz4 && zstd 配置
       if [ "${{ github.event.inputs.LZ4 }}" = "true" ]; then
        echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
        echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
        echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
        echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
        echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"

        # TMPFS 配置
        echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
        echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

        # BBR 配置
        echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
        echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"

        # ECN 配置
        echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
        echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"

        # SSG IO 配置
        if [ "${{ github.event.inputs.LZ4 }}" = "true" ]; then
         echo "CONFIG_MQ_IOSCHED_SSG=y" >> $CONFIG_FILE
         echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> $CONFIG_FILE

         # ZRAM 配置
         if [ "${{ github.event.inputs.ZRAM }}" = "true" ]; then
          echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
          echo "CONFIG_CRYPTO_LZ4K_OPLUS=y" >> "$CONFIG_FILE"
          echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
         fi

         # 禁用 defconfig 审查
         sed -i 's/check_defconfig//' ./common/build.config.gki

    - name: Build Kernel
      run: |
       CLANG_PATH="clang-r416183b"
       CLANG_DIR="prebuilts-master"
       USE_LLVM_IAS=true
       export PATH="$GITHUB_WORKSPACE/kernel_workspace/$CLANG_DIR/clang/host/linux-x86/$CLANG_PATH/bin:$PATH"
       export PATH="/usr/lib/ccache:$PATH"
       export CC="ccache clang"
       sudo apt install -y libelf-dev ccache
       cd kernel_workspace/common
       MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
       RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
       PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
       LD=ld.lld HOSTLD=ld.lld KCFLAGS+=-Wno-error"
       if [[ "$USE_LLVM_IAS" == "true" ]]; then
        MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
       fi
       make -j$(nproc --all) O=out $MAKE_ARGS gki_defconfig
       make -j$(nproc --all) O=out $MAKE_ARGS
       ccache -s
        
    - name: Make AnyKernel3
      run: |
       git clone https://github.com/Numbersf/AnyKernel3 --depth=1
       rm -rf ./AnyKernel3/.git
       mkdir -p kernel_workspace/out/Final-Image-Find/
       dir1=""
       dir2=""
       image_path=$(find "./kernel_workspace/common/out/" -name "Image" | head -n 1)
       if [ -n "$image_path" ]; then
       dir1=$(dirname "$image_path")/
       echo "使用 make 编译的统一路径，成功找到 Image 文件"
       else
       echo "未找到 Image 文件，构建失败" >&2
       exit 1
       fi
       if [ -n "$image_path" ] && [ -f "$image_path" ]; then
        echo "Image file finally located at: $image_path"
        cp "$image_path" ./AnyKernel3/Image
        cp "$image_path" kernel_workspace/out/Final-Image-Find/Image
         fi
        fi
    - name: Apply patch_linux and replace Image
      if: ${{ github.event.inputs.KPM == 'true' }}
      run: |
       cd kernel_workspace/out/Final-Image-Find
       curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
       chmod +x patch_linux
       ./patch_linux
       rm -f Image
       mv oImage Image
       cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

    - name: Download Latest SUSFS Module from CI
      if: ${{ github.event.inputs.SUSFS_CI == 'CI' }}
      continue-on-error: true
      run: |
       LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
       "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
        jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
        if [ -z "$LATEST_RUN_ID" ]; then
         echo "No successful run found for branch v1.5.2+"
        else
        ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
        "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')
         if [ -n "$ARTIFACT_URL" ]; then
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
           cp ksu_module_susfs_1.5.2+_CI.zip ./AnyKernel3/
         else
          echo "Failed to fetch artifact URL"
           fi
          fi

    - name: Upload AnyKernel3
      uses: actions/upload-artifact@v4
      with:
      name: AnyKernel3_SukiSUUltra_${{ env.KSUVER }}_${{ steps.file_clean.outputs.value }}${{ steps.suffix.outputs.value }}
      path: ./AnyKernel3/*

    - name: Download and Unzip ZRAM
      if: ${{ github.event.inputs.ZRAM == 'true' }}
      id: zram_find
      run: |
       set -e
       sudo apt install -y unzip
       curl -s https://api.github.com/repos/FurLC/ZRAM-Module/releases/latest | \
       grep "browser_download_url" | grep "ZRAM-Module-.*\.zip" | cut -d '"' -f 4 | xargs wget -N
       unzip "$(ls -t ZRAM-Module-*.zip | head -1)" -d ZRAM-Module
       target="./ZRAM-Module/zram/zram.ko"
       echo "查找 zram.ko 模块文件..."
       search_paths=(
          "./kernel_workspace/out"
          "./kernel_workspace/device/qcom"
         )
       zram_path=""
       for path in "${search_paths[@]}"; do
        zram_path=$(find "$path" -type f -name "zram.ko" | head -n 1)
        [ -n "$zram_path" ] && break
        done
       if [ -z "$zram_path" ]; then
        zram_path=$(find "./kernel_workspace" -type f -name "zram.ko" | head -n 1)
       fi
       if [ -n "$zram_path" ] && [ -f "$zram_path" ]; then
        echo " ZRAM module file finally located at: $zram_path "
        mkdir -p "$(dirname "$target")"
       if [ "$(realpath "$zram_path")" != "$(realpath "$target")" ]; then
        cp "$zram_path" "$target"
       else
        echo "源文件与目标路径相同，跳过复制"
         fi
        else
         echo "未找到 zram.ko 文件，可能是未支持的内核版本或者未成功构建"
         echo "upload=false" >> "$GITHUB_OUTPUT"
         exit 0
           fi

    - name: Upload ZRAM Module
      if: ${{ github.event.inputs.ZRAM == 'true' && steps.zram_find.outputs.upload != 'false' }}
      uses: actions/upload-artifact@v4
      with:
      name: ZRAM-Module_android12_${{ steps.file_clean.outputs.value }}
      path: ZRAM-Module/*

    - name: Post-build Disk Check
      run: df -h
